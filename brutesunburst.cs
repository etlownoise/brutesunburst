using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

/*Sunburst hashes ugly cracker...brute forcer..
	ET Lownoise 2020

	Combinations Code from Eric Lippert https://stackoverflow.com/questions/3093622/generating-all-possible-combinations/3098381#3098381		
	FNV http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function

	This by no means is the most efficient way to crack the sunburst hashes, i just wanted to replicate some results as		
	Fireeye already cracked some here https://github.com/fireeye/sunburst_countermeasures/blob/main/fnv1a_xor_hashes.txt 
	However while doing, it was noted there still are some hashes not cracked. I have left those defined in 
    notdecoded_hashesb[] for someone with better hardware to try to brake them.

	Example: brutesunburst.exe AAAA

	BRUTESUNBURST HASHES =================
	>>>msmpeng 5183687599225757871
	>>>sense 16335643316870329598
	Pattern A or O eg. AAAA0
	Pattern:AAAA
	>>>cavp 17204844226884380288
	>>>date 16066522799090129502
	>>>dnsd 13316211011159594063
	>>>egui 607197993339007484
	>>>ekrn 3200333496547938354
	>>>epfw 17939405613729073960
	>>>fses 3413052607651207697
	>>>fsfw 3407972863931386250
	>>>fsma 3421213182954201407
	>>>fsms 3421197789791424393
	>>>fsni 3413886037471417852
	>>>idaq 14256853800858727521
	>>>ksde 17633734304611248415
	>>>peid 9531326785919727076
	>>>ppee 14710585101020280896
	>>>xagt 15695338751700748390
*/


public class Program
{

	//Hashes decoded by fireeye
	private static readonly ulong[] hashesb = new ulong[]
		{
			10063651499895178962UL,
			10235971842993272939UL,
			10296494671777307979UL,
			10336842116636872171UL,
			10374841591685794123UL,
			10393903804869831898UL,
			10463926208560207521UL,
			10484659978517092504UL,
			10545868833523019926UL,
			10657751674541025650UL,
			106672141413120087UL,
			10734127004244879770UL,
			10829648878147112121UL,
			11073283311104541690UL,
			1109067043404435916UL,
			11109294216876344399UL,
			11266044540366291518UL,
			11266044540366291518UL,
			11385275378891906608UL,
			11771945869106552231UL,
			11801746708619571308UL,
			11818825521849580123UL,
			11913842725949116895UL,
			12027963942392743532UL,
			12094027092655598256UL,
			12343334044036541897UL,
			12445177985737237804UL,
			12445177985737237804UL,
			12445232961318634374UL,
			12574535824074203265UL,
			12679195163651834776UL,
			12709986806548166638UL,
			12718416789200275332UL,
			12790084614253405985UL,
			12969190449276002545UL,
			13014156621614176974UL,
			13029357933491444455UL,
			13135068273077306806UL,
			13260224381505715848UL,
			13316211011159594063UL,
			13464308873961738403UL,
			13544031715334011032UL,
			13581776705111912829UL,
			13599785766252827703UL,
			13611051401579634621UL,
			13611814135072561278UL,
			1367627386496056834UL,
			1368907909245890092UL,
			13693525876560827283UL,
			13799353263187722717UL,
			13825071784440082496UL,
			13876356431472225791UL,
			14055243717250701608UL,
			14079676299181301772UL,
			14095938998438966337UL,
			14111374107076822891UL,
			14193859431895170587UL,
			14226582801651130532UL,
			14256853800858727521UL,
			14480775929210717493UL,
			14482658293117931546UL,
			14513577387099045298UL,
			14630721578341374856UL,
			14710585101020280896UL,
			14710585101020280896UL,
			14868920869169964081UL,
			14968320160131875803UL,
			14971809093655817917UL,
			15039834196857999838UL,
			15092207615430402812UL,
			15114163911481793350UL,
			15194901817027173566UL,
			15267980678929160412UL,
			15457732070353984570UL,
			15535773470978271326UL,
			15587050164583443069UL,
			15695338751700748390UL,
			15695338751700748390UL,
			15997665423159927228UL,
			16066522799090129502UL,
			16130138450758310172UL,
			1614465773938842903UL,
			16292685861617888592UL,
			16335643316870329598UL,
			16423314183614230717UL,
			16570804352575357627UL,
			1682585410644922036UL,
			16858955978146406642UL,
			16990567851129491937UL,
			17017923349298346219UL,
			17097380490166623672UL,
			17109238199226571972UL,
			17204844226884380288UL,
			17291806236368054941UL,
			17351543633914244545UL,
			17439059603042731363UL,
			17574002783607647274UL,
			17633734304611248415UL,
			17683972236092287897UL,
			17849680105131524334UL,
			17939405613729073960UL,
			17978774977754553159UL,
			17984632978012874803UL,
			17997967489723066537UL,
			18147627057830191163UL,
			18150909006539876521UL,
			18159703063075866524UL,
			18246404330670877335UL,
			18294908219222222902UL,
			18392881921099771407UL,
			191060519014405309UL,
			2032008861530788751UL,
			2128122064571842954UL,
			2478231962306073784UL,
			2532538262737333146UL,
			2597124982561782591UL,
			2600364143812063535UL,
			2717025511528702475UL,
			2734787258623754862UL,
			27407921587843457UL,
			2760663353550280147UL,
			2797129108883749491UL,
			2810460305047003196UL,
			292198192373389586UL,
			2934149816356927366UL,
			3045986759481489935UL,
			3178468437029279937UL,
			3200333496547938354UL,
			3200333496547938354UL,
			3320026265773918739UL,
			3341747963119755850UL,
			3407972863931386250UL,
			3413052607651207697UL,
			3413886037471417852UL,
			3421197789791424393UL,
			3421213182954201407UL,
			3538022140597504361UL,
			3575761800716667678UL,
			3588624367609827560UL,
			3626142665768487764UL,
			3642525650883269872UL,
			3656637464651387014UL,
			3660705254426876796UL,
			3769837838875367802UL,
			3778500091710709090UL,
			3796405623695665524UL,
			3869935012404164040UL,
			3890769468012566366UL,
			3890794756780010537UL,
			397780960855462669UL,
			4030236413975199654UL,
			4088976323439621041UL,
			4454255944391929578UL,
			4501656691368064027UL,
			4578480846255629462UL,
			4821863173800309721UL,
			4931721628717906635UL,
			506634811745884560UL,
			5132256620104998637UL,
			5183687599225757871UL,
			521157249538507889UL,
			5219431737322569038UL,
			541172992193764396UL,
			5415426428750045503UL,
			5449730069165757263UL,
			5587557070429522647UL,
			5614586596107908838UL,
			576626207276463000UL,
			5942282052525294911UL,
			5945487981219695001UL,
			5984963105389676759UL,
			607197993339007484UL,
			6088115528707848728UL,
			6116246686670134098UL,
			6116246686670134098UL,
			6180361713414290679UL,
			6195833633417633900UL,
			6274014997237900919UL,
			640589622539783622UL,
			6461429591783621719UL,
			6491986958834001955UL,
			6508141243778577344UL,
			682250828679635420UL,
			6827032273910657891UL,
			6943102301517884811UL,
			700598796416086955UL,
			7080175711202577138UL,
			7175363135479931834UL,
			7315838824213522000UL,
			7412338704062093516UL,
			7516148236133302073UL,
			7701683279824397773UL,
			7775177810774851294UL,
			7810436520414958497UL,
			7878537243757499832UL,
			79089792725215063UL,
			7982848972385914508UL,
			8052533790968282297UL,
			8129411991672431889UL,
			8146185202538899243UL,
			835151375515278827UL,
			8381292265993977266UL,
			8408095252303317471UL,
			8473756179280619170UL,
			8478833628889826985UL,
			8612208440357175863UL,
			8697424601205169055UL,
			8698326794961817906UL,
			8698326794961817906UL,
			8709004393777297355UL,
			8727477769544302060UL,
			8760312338504300643UL,
			8799118153397725683UL,
			8873858923435176895UL,
			8873858923435176895UL,
			8994091295115840290UL,
			9007106680104765185UL,
			9061219083560670602UL,
			9149947745824492274UL,
			917638920165491138UL,
			9333057603143916814UL,
			9384605490088500348UL,
			9531326785919727076UL,
			9555688264681862794UL,
			9559632696372799208UL,
			9903758755917170407UL,
		};

	//The ones still not cracked.
	private static readonly ulong[] notdecoded_hashesb = new ulong[]
		{
			10501212300031893463UL,
			12785322942775634499UL,
			13655261125244647696UL,
			13783346438774742614UL,
			13852439084267373191UL,
			14243671177281069512UL,
			14695981039346656037UL,
			1475579823244607677UL,
			15514036435533858158UL,
			155978580751494388UL,
			16066651430762394116UL,
			16112751343173365533UL,
			17624147599670377042UL,
			17956969551821596225UL,
			18446744073709551613UL,
			2380224015317016190UL,
			2589926981877829912UL,
			3320767229281015341UL,
			3425260965299690882UL,
			6605813339339102567UL,
			7574774749059321801UL,
			9234894663364701749UL
		};

	//Just in case you want to play straight with hashing some strings
	private static readonly string[] execb = new string[]
		{
			"msmpeng",
			"sense"
		};

	public static void Main(string[] args)
	{
		Console.WriteLine("BRUTESUNBURST =================");


		foreach (string s in Program.execb)
		{
			foreach (ulong num in Program.hashesb)
			{
				if (Program.GetHash(s) == num)
				{
					Console.WriteLine(">>>" + s + " " + num);
				}
			}

		}

		//Console.WriteLine("Pattern A or O eg. AAAA0");

		string pattern = args[0];
		Console.WriteLine("Pattern:"+args[0]);

		foreach (var s in Program.Combinations(pattern))
		{
			//Console.WriteLine("--"+s);
			foreach (ulong num in Program.hashesb)
			{
				if (Program.GetHash(s) == num)
				{
					Console.WriteLine(">>>" + s + " " + num);
				}
			}
		}

	}


	//from https://stackoverflow.com/questions/29488827/c-sharp-generate-all-possible-combination-with-different-charsets
	private static IEnumerable<string> Combinations(string pattern)
	{
		string letters = "abcdefghijklmnopqrstuvwxyz-_0123456789.";
		string digits = "0123456789";

		var sets = pattern.Select(ch => ch == 'A' ? letters : digits);

		return Combine(sets).Select(x => new String(x.ToArray()));
	}

	//from https://stackoverflow.com/questions/29488827/c-sharp-generate-all-possible-combination-with-different-charsets
	public static IEnumerable<IEnumerable<T>> Combine<T>(IEnumerable<IEnumerable<T>> sequences)
	{
		IEnumerable<IEnumerable<T>> emptyProduct = new[] { Enumerable.Empty<T>() };

		return sequences.Aggregate(
		  emptyProduct,
		  (accumulator, sequence) =>
			from accseq in accumulator
			from item in sequence
			select accseq.Concat(new[] { item }));
	}

	//SolarWinds.Orion.Core.BusinessLayer.dll
	private static ulong GetHash(string s)
	{
		ulong num = 14695981039346656037UL;
		try
		{
			foreach (byte b in Encoding.UTF8.GetBytes(s))
			{
				num ^= (ulong)b;
				num *= 1099511628211UL;
			}
		}
		catch
		{
		}
		return num ^ 6605813339339102567UL;
	}
}